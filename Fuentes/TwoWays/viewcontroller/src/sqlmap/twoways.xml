<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- Place filename in namespace field value without extension (.xml) -->
<sqlMap namespace="twowaysMap">
  <!--- Clientes -->
  <select id="obtenerClientes"  parameterClass="java.lang.String" resultClass="com.twoways.to.ClientsTO">
     select 
        CLI_ADDRESS as cliAddress,
        CLI_COUNTRY as cliCountry,
        CLI_DESCRIPTION as cliDescription,
        CLI_ID as  cliId,
        CLI_MAIL as cliMail,
        CLI_NAME as cliName,
        CLI_PHONE as cliPhone,
        CLI_POSTAL_CODE as cliPostalCode          
     from 
     Clients 
     WHERE CLI_ERASE_DATE is null
     order by CLI_NAME
     
  </select>  
  
  <resultMap id="select-Client" class="com.twoways.to.ClientsTO" >
      <result property="cliAddress" column="CLI_ADDRESS" />
      <result property="cliDescription" column="CLI_DESCRIPTION"/>
      <result property="cliCountry"   column="CLI_COUNTRY" />
      <result property="cliId" column="CLI_ID"  />
      <result property="cliName" column="CLI_NAME" />
      <result property="cliPhone" column="CLI_PHONE" />
      <result property="cliPostalCode" column="CLI_POSTAL_CODE" />
      <result property="cliMail" column="CLI_MAIL" />
      <result property="currencyTO.curId" column="cur_id" />
      <result property="currencyTO.curName" column="cur_Name" />
    </resultMap>
    
    <resultMap id="select-Client-List" class="com.twoways.to.ClientsTO" >
      <result property="cliAddress" column="CLI_ADDRESS" />
      <result property="cliDescription" column="CLI_DESCRIPTION"/>
      <result property="cliCountry"   column="CLI_COUNTRY" />
      <result property="cliId" column="CLI_ID"  />
      <result property="cliName" column="CLI_NAME" />
      <result property="cliPhone" column="CLI_PHONE" />
      <result property="cliPostalCode" column="CLI_POSTAL_CODE" />  
      <result property="cliMail" column="CLI_MAIL" />
      <result property="cliEraseDate" column="CLI_ERASE_DATE" />      
    </resultMap>
  
 <statement  id="getClientById" resultMap="select-Client" parameterClass="java.lang.String" >
     select *       
     from clients left outer join currency on clients.currency_cur_id = currency.cur_id
     where cli_id = #value#

 </statement>
 
  <statement  id="getClientByName" resultMap="select-Client" parameterClass="java.lang.String" >
     select *       
     from clients left outer join currency on clients.currency_cur_id = currency.cur_id
     where cli_Name = #value# 
     and CLI_ERASE_DATE is null
     and rownum = 1 
 </statement>
 
 
  <statement id="buscarClientes" resultMap="select-Client-List"  parameterClass="java.lang.String" >
     select *       
     from clients left outer join currency on clients.currency_cur_id = currency.cur_id
     where upper(clients.CLI_NAME) like '%' || upper(#value#) || '%'
         
  </statement>

  <select  id="clients.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select client_seq.nextval cliId from dual</select> 
         
  <select  id="order.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select order_seq.nextval ordId from dual</select>   

  <select  id="client_responsable.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select client_resp_seq.nextval creId from dual</select> 
 
  <insert id="insertClients" parameterClass="com.twoways.to.ClientsTO"   >
       
      insert into clients
          (cli_id, cli_name, cli_description, cli_mail, cli_address, cli_phone, cli_country, cli_postal_code,currency_cur_id)
        values
          (#cliId#, #cliName#, #cliDescription#, #cliMail#, #cliAddress#, #cliPhone#, #cliCountry#, #cliPostalCode#,#currencyTO.curId#)
         
  </insert>      
  
  <insert id="insertClientsRates" parameterClass="com.twoways.to.ClientsRatesTO"   >
    insert into clients_rates
           (clients_cli_id, clr_value, rates_rat_id)
    values
          (#clientsTO.cliId#, #clrValue#, #ratesTO.ratId#)
          
  </insert>
  
  <insert id="insertClientsResponsable" parameterClass="com.twoways.to.ClientResponsableTO"   >
    insert into client_responsable
           (cre_id, cre_First_Name, cre_Last_Name, cre_email,  cre_Phone_Number, cre_Msn, cre_Skype, clients_cli_id)
    values
          (#creId#, #creFirstName#, #creLastName#, #creEmail#, #crePhoneNumber#, #creMsn#, #creSkype#, #clientsTO.cliId#)
          
  </insert>
  
  <update  id="updateClients" parameterClass="com.twoways.to.ClientsTO">
      UPDATE clients
      SET     cli_name = #cliName# , 
              cli_description = #cliDescription#,
              cli_mail = #cliMail#,
              cli_address = #cliAddress#  ,
              cli_phone =  #cliPhone# ,
              cli_country = #cliCountry# ,
              cli_postal_code =#cliPostalCode# ,
              currency_cur_id= #currencyTO.curId#,
              cli_erase_date = null
              WHERE  cli_id = #cliId#                     
  </update>
  
  <delete id="deleteClients" parameterClass="com.twoways.to.ClientsTO">
        UPDATE Clients
        SET CLI_ERASE_DATE = sysdate
        WHERE  cli_id = #cliId#    
        
        
 </delete>
      
   <resultMap id="select-Cli-Rates" class="com.twoways.to.ClientsRatesTO" >
      <result property="clrValue" column="CLR_VALUE" />
      <result property="clientsTO.cliId" column="CLIENTS_CLI_ID"/>
      <result property="ratesTO.ratId" column="RAT_ID" />
      <result property="ratesTO.ratDescription" column="RAT_DESCRIPTION"/>
      <result property="ratesTO.ratName"   column="RAT_NAME" />
      <result property="ratesTO.rateTypesTO.rtyName" column="RAT_TYPE"  /> 
      <result property="ratesTO.rateTypesTO.rtyAlternativeName" column="RTY_ALTERNATIVE_NAME"  />
      <result property="ratesTO.currencyTO.curId" column="cur_id"  />
      <result property="ratesTO.currencyTO.curSymbol" column="cur_symbol"  />
   </resultMap>

   <resultMap id="select-Cli-Responsable" class="com.twoways.to.ClientResponsableTO" >
      <result property="creId" column="CRE_ID" />
      <result property="creFirstName" column="CRE_FIRST_NAME" />
      <result property="creLastName" column="CRE_LAST_NAME"/>
      <result property="crePhoneNumber" column="CRE_PHONE_NUMBER" />
      <result property="creMsn" column="CRE_MSN"  />
      <result property="creSkype" column="CRE_SKYPE"  />
      <result property="creEmail" column="CRE_EMAIL"  />
      <result property="clientsTO.cliId" column="CLIENTS_CLI_ID"/>      
   </resultMap>   
  
  <statement  id="getClientRatesByCliId" resultMap="select-Cli-Rates"  parameterClass="com.twoways.to.ClientsTO" >
     select * from ((clients_rates cr join rates r on cr.rates_rat_id = r.rat_id ) left outer join currency cur
     on r.currency_cur_id =  cur.cur_id ) left outer join rate_types rt on rt.rty_name = r.rat_type
     where    cr.clients_cli_id=#cliId# 
    
  </statement>     

  <statement  id="getClientResponsableByCliId" resultMap="select-Cli-Responsable"  parameterClass="com.twoways.to.ClientsTO" >
     select * from client_responsable cr 
     where   cr.clients_cli_id=#cliId#
     and cr.cre_erase_date is null
    
  </statement>   
  
  <insert id="updateClientsRates" parameterClass="com.twoways.to.ClientsRatesTO"   >
    update  clients_rates
    set  clr_value= #clrValue#
    where
    clients_cli_id = #clientsTO.cliId#  and  
    rates_rat_id = #ratesTO.ratId#
          
  </insert>
   
  <delete id="deleteClientsRates" parameterClass="com.twoways.to.ClientsRatesTO"   >
    delete  clients_rates
    where
    clients_cli_id = #clientsTO.cliId#  and  
    rates_rat_id = #ratesTO.ratId#        
  </delete>  
  
  <!--Empleados-->

    <resultMap id="select-Employee" class="com.twoways.to.EmployeesTO" >
      <result property="empId" column="EMP_ID" />    
      <result property="empAddress" column="EMP_ADDRESS" />
      <result property="empAvailability" column="EMP_AVAILABILITY"/>
      <result property="empBirth"   column="EMP_BIRTH" />
      <result property="empFirstName" column="EMP_FIRST_NAME"  />
      <result property="empLastName" column="EMP_LAST_NAME" />
      <result property="empLocation" column="EMP_LOCATION" />
      <result property="empMail" column="EMP_MAIL" />  
      <result property="empMobileNumber" column="EMP_MOBILE_NUMBER" /> 
      <result property="empMsn" column="EMP_MSN" /> 
      <result property="empObservations" column="EMP_OBSERVATIONS" /> 
      <result property="empPhoneNumber" column="EMP_PHONE_NUMBER" />
      <result property="empEraseDate" column="EMP_ERASE_DATE" />
    </resultMap>
  
  <select id="obtenerEmpleados"  resultMap="select-Employee" parameterClass="java.lang.String">
     select *      
     from 
     Employees
     order by emp_first_name desc

  </select>
  
  
  <select id="obtenerTiposDocumentos"  resultClass="com.twoways.to.DocTypes" parameterClass="java.lang.String">
     select dot_id as dotId, dot_name as dotName, dot_description as dotDescription  
     from doc_types t
     order by dot_name 

  </select>
  
 <statement  id="getEmpById" resultMap="select-Employee" parameterClass="java.lang.String" >
     select *       
     from employees
     where emp_id = #value#

 </statement>
 

 
 <statement  id="getEmpByRatesName" resultMap="select-Employee" parameterClass="java.lang.String" >
      select *
        from employees e, employees_types et
        where e.emp_id = et.employees_emp_id
        and et.employee_type_ety_name =  #value#
        and e.emp_erase_date is null
        order by e.emp_first_Name
 </statement>
 
 
 
  <statement id="buscarEmpleados" resultMap="select-Employee"  parameterClass="java.lang.String" >
     select *       
     from employees 
     where upper(EMP_FIRST_NAME) like '%' || upper(#value#) || '%'
     order by emp_first_Name 
  </statement>

  <select  id="employees.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select employee_seq.nextval empId from dual</select> 

  <insert id="insertEmployee" parameterClass="com.twoways.to.EmployeesTO"   >
       
      insert into employees
          (emp_id, emp_first_name, emp_last_name, emp_availability, emp_mail, emp_msn, emp_address, emp_phone_number, emp_mobile_number, emp_location, emp_birth,emp_observations)
        values
          (#empId#, #empFirstName#, #empLastName#, #empAvailability#, #empMail#, #empMsn#, #empAddress#, #empPhoneNumber#, #empMobileNumber#, #empLocation#, #empBirth#, #empObservations#)
         
  </insert>
  
  <insert id="insertEmployeesRates" parameterClass="com.twoways.to.EmployeesRatesTO"   >
    insert into employees_rates
           (employees_emp_id, emr_value, rates_rat_id)
    values
          (#employeesTO.empId#, #emrValue#, #ratesTO.ratId#)
          
  </insert>
  
  <insert id="updateEmployeesRates" parameterClass="com.twoways.to.EmployeesRatesTO"   >
    update  employees_rates
    set  emr_value= #emrValue#
    where
    employees_emp_id = #employeesTO.empId#  and  
    rates_rat_id = #ratesTO.ratId#          
  </insert>
  
  <delete id="deleteEmployeesRates" parameterClass="com.twoways.to.EmployeesRatesTO"   >
    delete  employees_rates
    where
    employees_emp_id = #employeesTO.empId#  and  
    rates_rat_id = #ratesTO.ratId#          
  </delete>
  
  <insert id="insertEmployeesTypes" parameterClass="com.twoways.to.EmployeesTypesTO"   >
    insert into employees_types
           (EMPLOYEES_EMP_ID,  EMPLOYEE_TYPE_ETY_NAME)
    values
          (#employeesTO.empId#, #employeeTypeTO.etyName#)          
  </insert>
  
  <insert id="updateEmployeesTypes" parameterClass="com.twoways.to.EmployeesTypesTO"   >
    update  employees_types
    set  EMPLOYEE_TYPE_ETY_NAME = #etyName#
    where
    employees_emp_id = #employeesTO.empId#          
  </insert>  
  
  <delete id="deleteEmployeesTypes" parameterClass="com.twoways.to.EmployeesTypesTO"   >
    delete  employees_types
    where
    employees_emp_id = #employeesTO.empId# 
  </delete>  
  
  <update  id="updateEmployees" parameterClass="com.twoways.to.EmployeesTO">
      UPDATE employees
      SET     emp_first_name = #empFirstName# , 
              emp_last_name = #empLastName# , 
              emp_availability = #empAvailability#,
              emp_mail = #empMail#,
              emp_msn = #empMsn#  ,
              emp_address =  #empAddress# ,
              emp_phone_number = #empPhoneNumber# ,
              emp_mobile_number =#empMobileNumber# ,
              emp_location= #empLocation#,
              emp_birth = #empBirth#,
              emp_observations = #empObservations#,
              emp_erase_Date=null
              WHERE  emp_id = #empId#                     
  </update>
  
  <delete id="deleteEmployee" parameterClass="com.twoways.to.EmployeesTO">
        UPDATE Employees
        SET emp_erase_date = sysdate
        WHERE  emp_id = #empId#    
 </delete>     
 
  <resultMap id="select-Tipo-Emp" class="com.twoways.to.EmployeeTypeTO" >
       
      <result property="etyName" column="ety_name" />
      <result property="etyDescription" column="ety_description" />
  </resultMap>      
  
  <statement  id="obtenerTipoEmpleado" resultMap="select-Tipo-Emp">
     select *    
     from 
     employee_type
  </statement>   
     
  <statement  id="obtenerTipoEmpleadoByEmpId" resultMap="select-Tipo-Emp" parameterClass="java.lang.String">
     select *    
     from employee_type
     where ety_name not in (select employee_type_ety_name 
                            from employees_types
                            where employees_emp_id = #empId#)
  </statement>
  
  <resultMap id="select-Emp-Rates" class="com.twoways.to.EmployeesRatesTO" >
      <result property="emrValue" column="EMR_VALUE" />
      <result property="employeesTO.empId" column="EMPLOYEES_EMP_ID"/>
      <result property="ratesTO.ratId" column="RAT_ID" />
      <result property="ratesTO.ratDescription" column="RAT_DESCRIPTION"/>
      <result property="ratesTO.ratName"   column="RAT_NAME" />
      <result property="ratesTO.rateTypesTO.rtyName" column="RAT_TYPE"  />
      <result property="ratesTO.currencyTO.curSymbol" column="CUR_SYMBOL"  />
  </resultMap>
  
  <statement  id="getEmpRatesByEmpId" resultMap="select-Emp-Rates"  parameterClass="com.twoways.to.EmployeesTO" >
     select * from employees_rates cr,rates r , currency y
     where cr.rates_rat_id = r.rat_id 
     and   cr.employees_emp_id=#empId#
     and r.currency_cur_id=y.cur_id
  </statement>     
  
  
  
   <statement  id="getEmpRatesByEmpRate" resultMap="select-Emp-Rates"  parameterClass="com.twoways.to.EmployeesRatesTO" >
     select * from employees_rates cr, rates r, currency c
     where cr.rates_rat_id = r.rat_id 
     and cr.employees_emp_id=#employeesTO.empId#
     and r.rat_type=#ratesTO.rateTypesTO.rtyName#
     and r.currency_cur_id=c.cur_id

  </statement>   

  <resultMap id="select-Emp-Types" class="com.twoways.to.EmployeesTypesTO">
      <result property="employeesTO.empId" column="EMPLOYEES_EMP_ID"/>
      <result property="employeeTypeTO.etyName" column="EMPLOYEE_TYPE_ETY_NAME" />     
  </resultMap>
  
  <statement  id="getEmpTypesByEmpId" resultMap="select-Emp-Types"  parameterClass="com.twoways.to.EmployeesTO" >
     select * from employees_types cr 
     where cr.employees_emp_id=#empId#
  </statement>  
  
  <!--Monedas -->
 
  <resultMap id="select-Currency" class="com.twoways.to.CurrencyTO" >
       
      <result property="curId" column="cur_id" />
      <result property="curName" column="cur_Name" />
      <result property="curSymbol" column="cur_Symbol" />      
  </resultMap> 
   
  <statement  id="getCurrencyId" resultMap="select-Currency"  parameterClass="java.lang.Integer" >
     select *    
     from 
     Currency
     where cur_id = #value#
  </statement>   
  
   <statement  id="getCurrencyValue" resultClass="java.lang.Double"  parameterClass="java.util.Map" >
    select cuc_value from (
        select cuc_value,to_Date(#curDate#,'dd/MM/yyyy hh24:mi')-cuc_date as diferencia
        from currency_cotizations 
        where currency_cur_id = #curId# 
        and to_Date(#curDate#,'dd/MM/yyyy hh24:mi') >= cuc_date 
        order by diferencia )
   </statement>     
 
  <statement id="obtenerMonedas"  parameterClass="java.lang.String" resultMap="select-Currency" >
     select *    
     from 
     Currency
     
  </statement>

<!--Tarifas-->
  
  <resultMap id="select-Rate-List" class="com.twoways.to.RatesTO" >
      <result property="ratId" column="RAT_ID" />
      <result property="ratDescription" column="RAT_DESCRIPTION"/>
      <result property="ratName"   column="RAT_NAME" />
      <result property="ratEraseDate" column="RAT_ERASE_DATE" />
      <result property="rateTypesTO.rtyName" column="RAT_TYPE"  />
      <result property="rateTypesTO.rtyAlternativeName" column="RTY_ALTERNATIVE_NAME"  />
      <result property="currencyTO.curName" column="cur_Name" />    
      <result property="currencyTO.curId" column="cur_Id" />
      <result property="currencyTO.curSymbol" column="cur_symbol" />
  </resultMap>
  
  <select id="obtenerTarifas"  parameterClass="java.lang.String" resultMap="select-Rate-List">
     select *
     from 
     Rates r, Currency c, rate_types rt
     where r.currency_cur_id = c.cur_id and rt.rty_name = r.rat_type    
  </select>
  
  <select  id="rates.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
     select rates_seq.nextval ratId from dual
  </select> 

  <insert id="insertRate" parameterClass="com.twoways.to.RatesTO" >
      insert into rates
          (rat_id, rat_type, rat_name, rat_description,currency_cur_id)
        values
          (#ratId#, #rateTypesTO.rtyName#, #ratName#, #ratDescription#, #currencyTO.curId#)                        
  </insert>

  <update  id="updateRate" parameterClass="com.twoways.to.RatesTO">
      UPDATE rates
      SET     rat_name = #ratName# , 
              rat_description = #ratDescription#,
              rat_type = #rateTypesTO.rtyName#,
              currency_cur_id= #currencyTO.curId#,
              rat_erase_date=null
              WHERE  rat_id = #ratId#                     
  </update>  
  
  <select id="obtenerTipoTarifas"  parameterClass="java.lang.String" resultClass="com.twoways.to.RateTypesTO">
     select 
        RTY_NAME as rtyName,
        RTY_DESCRIPTION as rtyDescription,
        RTY_ALTERNATIVE_NAME as rtyAlternativeName
     from 
     Rate_Types
     
  </select>
  
    <select id="obtenerServicios"  parameterClass="java.lang.String" resultClass="com.twoways.to.RateTypesTO">
     select 
        RTY_NAME as rtyName,
        RTY_DESCRIPTION as rtyDescription,
        RTY_ALTERNATIVE_NAME as rtyAlternativeName
     from 
     Rate_Types
     where upper(RTY_NAME) <![CDATA[ <> ]]> 'CLIENTE'
     
  </select>
  
  
    
 <select  id="getRatesByType" resultMap="select-Rate-List">
     select *
     from (Rates r left outer  join Currency c on r.currency_cur_id = c.cur_id)  
     left outer join rate_types rt on r.rat_type = rt.rty_name

 </select>   
    
 <select  id="getRateById" parameterClass="java.lang.String" resultMap="select-Rate-List">
     select *
     from (Rates r left outer  join Currency c on r.currency_cur_id = c.cur_id )  left outer join rate_types rt on r.rat_type = rt.rty_name
     where rat_id = #value#
 </select>

  <delete id="deleteRates" parameterClass="com.twoways.to.RatesTO">
        UPDATE Rates
        SET rat_erase_date=sysdate
        WHERE  rat_id = #ratId#    
 </delete> 

  <statement id="buscarTarifas" resultMap="select-Rate-List"  parameterClass="java.lang.String" >
     select *       
     from rates, currency  , rate_types
     where rates.currency_cur_id = currency.cur_id
     and rates.rat_type= rate_types.rty_name 
     and upper(rates.RAT_NAME) like '%' || upper( #value#) || '%'
     order by rates.RAT_NAME
     
  </statement>

<!--Usuarios-->
  <resultMap id="select-User" class="com.twoways.to.UsersTO" >
      <result property="usrFirstName" column="USR_FIRST_NAME" />
      <result property="usrLastName" column="USR_LAST_NAME"/>
      <result property="usrId"   column="USR_ID" />
      <result property="usrMail" column="USR_MAIL"  />
      <result property="usrBirth" column="USR_BIRTH" />
      <result property="usrPass" column="USR_PASS" />
      <result property="usrMobileNumber" column="USR_MOBILE_NUMBER" />
      <result property="usrOfficeNumber" column="USR_OFFICE_NUMBER" />  
      <result property="usrPhoneNumber" column="USR_PHONE_NUMBER" />
      <result property="rolesTO.rolId" column="rol_id" />
      <result property="rolesTO.rolName" column="rol_Name" />
  </resultMap>
  
  <resultMap id="select-User-busq"  class="com.twoways.to.UsersTO" >
      <result property="usrFirstName" column="USR_FIRST_NAME" />
      <result property="usrLastName" column="USR_LAST_NAME"/>
      <result property="usrId"   column="USR_ID" />
      <result property="usrMail" column="USR_MAIL"  />
      <result property="usrBirth" column="USR_BIRTH" />
      <result property="usrEraseDate" column="USR_ERASE_DATE" />
      
  </resultMap>

  <select id="obtenerUsuarios"  resultMap="select-User" parameterClass="java.lang.String">
     select * 
       from Users , Roles
      where roles_rol_id=rol_id
     
  </select>  
  
  <statement  id="getUserById" resultMap="select-User" parameterClass="java.lang.String" >
     select *
       from users, Roles 
      where usr_id = #value#
        and roles_rol_id=rol_id
  </statement>
 
  <statement id="buscarUsuarios" resultMap="select-User-busq"  parameterClass="java.lang.String" >
     select *       
     from users
     where upper(USR_FIRST_NAME) like '%' || upper( #value#) || '%'
     
  </statement>

  <statement id="buscarUsuariosId" resultMap="select-User-busq"  parameterClass="java.lang.String" >
     select *       
     from users
     where upper(USR_ID) like '%' || upper( #value#) || '%'
     
  </statement>
  
  <insert id="insertUser" parameterClass="com.twoways.to.UsersTO" >
      insert into users
          (USR_ID, USR_PASS, USR_FIRST_NAME, USR_LAST_NAME, USR_MAIL, USR_BIRTH, USR_MOBILE_NUMBER, USR_OFFICE_NUMBER, USR_PHONE_NUMBER,roles_rol_id)
        values
          (#usrId#, #usrPass#, #usrFirstName#, #usrLastName#, #usrMail#, #usrBirth#, #usrMobileNumber#, #usrOfficeNumber#, #usrPhoneNumber#,#rolesTO.rolId#)
                            
  </insert>
  
   <update  id="updateUser" parameterClass="com.twoways.to.UsersTO">
      UPDATE users
      SET     USR_PASS =#usrPass#,
              USR_FIRST_NAME = #usrFirstName# , 
              USR_LAST_NAME = #usrLastName#,
              USR_MAIL = #usrMail#,
              USR_BIRTH = #usrBirth#  ,
              USR_MOBILE_NUMBER =  #usrMobileNumber# ,
              USR_OFFICE_NUMBER = #usrOfficeNumber# ,
              USR_PHONE_NUMBER =#usrPhoneNumber# ,
              roles_rol_id= #rolesTO.rolId#,
              usr_erase_date=null
              WHERE  usr_id = #usrId#                     
  </update>
  
  <delete id="deleteUsers" parameterClass="com.twoways.to.UsersTO">
        UPDATE Users
        SET USR_ERASE_DATE = sysdate
        WHERE  usr_id = #usrId#    
 </delete>

 <statement id="obtenerRoles"  resultClass="com.twoways.to.RolesTO" parameterClass="java.lang.String">
     select  rol_id as rolId,
             rol_Name as rolName, 
             rol_description as rolDescription 
     from Roles     
  </statement>  
  
  <!-- Items -->
  <select  id="items.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select item_seq.nextval itmId from dual</select> 
  

  <insert id="insertItem" parameterClass="com.twoways.to.ItemsTO" >
      insert into items
          (itm_id, itm_type, itm_name, itm_description)
        values
          (#itmId#, #itmType#, #itmName#, #itmDescription#)                        
  </insert>

  <update  id="updateItem" parameterClass="com.twoways.to.ItemsTO">
      UPDATE items
      SET     itm_name = #itmName# , 
              itm_description = #itmDescription#,
              itm_type = #itmType#,
              itm_erase_date=null
      WHERE  itm_id = #itmId#                     
  </update>  
  
      <resultMap id="select-Item-List"  class="com.twoways.to.ItemsTO" >
          <result property="itmName" column="ITM_NAME" />
          <result property="itmId"   column="ITM_ID" />
          <result property="itmType" column="ITM_TYPE"  />
          <result property="itmDescription" column="ITM_DESCRIPTION" />
          <result property="itmEraseDate" column="ITM_ERASE_DATE" />      
      </resultMap>
    
  <statement id="buscarItems" resultMap="select-Item-List"  parameterClass="java.lang.String" >
     select *       
     from items
     where upper(items.ITM_NAME) like '%' || upper( #value#) || '%'
     order by items.ITM_NAME
     
  </statement>

  <delete id="deleteItem" parameterClass="com.twoways.to.ItemsTO">
        UPDATE Items
        SET itm_erase_date=sysdate
        WHERE  itm_id = #itmId#    
 </delete> 
  
   <select  id="getItemById" parameterClass="java.lang.String" resultMap="select-Item-List">
     select *
     from Items r 
     where itm_id = #value#
 </select>
  
  <!-- Translator -->
  <select  id="traductores.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select translator_seq.nextval traId from dual</select> 

 <insert id="insertarTraductor" parameterClass="com.twoways.to.TranslatorsTO" >
      insert into translators
          (tra_id, employees_emp_id)
        values
          (#traId#, #employeesTO.empId#)                        
  </insert>
  
 <select  id="trans_lang.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select trans_lang_seq.nextval tlaId from dual</select> 
   
  <insert id="insertTransLanguagues" parameterClass="com.twoways.to.TranslatorsLanguaguesTO">
        insert into translators_languagues
            (tla_id, employees_emp_id, languagues_acronyms_languagues,languagues_acronyms_laa_acrony, languagues_acronyms_languague1,languagues_acronyms_laa_acron1)
          values
            (#tlaId#, #employeesTO.empId#,#langAcronymsTO.languaguesTO.lanId#,#langAcronymsTO.laaAcronym#,#langAcronymsTO1.languaguesTO.lanId#,#langAcronymsTO1.laaAcronym#)
  </insert>

  <insert id="insertTransSpecializations" parameterClass="com.twoways.to.TranslatorsSpecializationsTO">
        insert into translators_specializations
            (translators_tra_id, specializations_spe_name)
          values
            (#translatorsTO.traId#,#specializationsTO.speName#)
  </insert>
  
  <resultMap id="select-Trans-Lang" class="com.twoways.to.TranslatorsLanguaguesTO">
      <result property="employeesTO.empId" column="employees_emp_id" />  
      <result property="langAcronymsTO.languaguesTO.lanId"   column="languagues_acronyms_languagues" />
      <result property="langAcronymsTO.laaAcronym"   column="languagues_acronyms_laa_acrony" />
      <result property="langAcronymsTO1.languaguesTO.lanId" column="languagues_acronyms_languague1"  />
      <result property="langAcronymsTO1.laaAcronym"   column="languagues_acronyms_laa_acron1" />    
      <result property="tlaId" column="tla_id"/>
  </resultMap>
  
    <resultMap id="select-Trans-Spezial" class="com.twoways.to.TranslatorsSpecializationsTO">
      <result property="translatorsTO.traId" column="translators_tra_id" />  
      <result property="specializationsTO.speName"  column="specializations_Spe_Name" />
  </resultMap>
  
  <statement  id="getTransLangByEmpId" resultClass="java.util.HashMap"  parameterClass="java.lang.Long" >
     select t.languagues_acronyms_languagues as lan_id_origen,
            (select l.lan_name from languagues l where l.lan_id=t.languagues_acronyms_languagues) as lan_origen,
            t.languagues_acronyms_laa_acrony as acron_origen,
            languagues_acronyms_languague1 as lan_id_destino,
            (select l.lan_name from languagues l where l.lan_id=t.languagues_acronyms_languague1) as lan_destino,
            t.languagues_acronyms_laa_acron1 as acron_destino,t.tla_id 
     from translators_languagues t 
     where t.employees_emp_id =  #empId#
     and t.tla_erase_Date is null
  </statement>  
    
  <statement  id="getTransSpezialByTransId" resultMap="select-Trans-Spezial"  parameterClass="java.lang.Long" >
     select *
     from translators_specializations t
     where t.translators_tra_id = #traId#
  </statement>  
  
  <resultMap id="select-TradId-List"  class="com.twoways.to.TranslatorsTO" >
      <result property="traId" column="tra_id" />   
      <result property="employeesTO.empId" column="employees_emp_id" />   
  </resultMap>
 
  
 
 <update id="deleteTranslatorsLangs" parameterClass="com.twoways.to.TranslatorsLanguaguesTO">
        UPDATE translators_languagues
        SET TLA_ERASE_DATE = sysdate
        WHERE  tla_id = #tlaId#    
 </update> 
 
  <update id="deleteTranslatorsSpezials" parameterClass="com.twoways.to.TranslatorsSpecializationsTO">
        delete from translators_specializations 
        WHERE  translators_tra_id = #translatorsTO.traId#   
        and specializations_spe_name = #specializationsTO.speName#
 </update> 
 
   <select  id="getTraByEmpId" parameterClass="java.lang.String" resultMap="select-TradId-List">
     select *
     from translators t
     where t.employees_emp_id = #value#
 </select>
 
 <select  id="getTraById" parameterClass="java.lang.Long" resultMap="select-TradId-List">
     select *
     from translators t
     where t.tra_id = #value#
 </select> 
 
  <statement id="obtenerIdioma"  resultClass="com.twoways.to.LanguaguesTO" parameterClass="java.lang.String">
     select  lan_id as lanId,
             lan_Name as lanName, 
             lan_description as lanDescription 
     from Languagues     
  </statement>  
  
   <resultMap id="select-Acron-List"  class="com.twoways.to.LanguaguesAcronymsTO" >
      <result property="laaAcronym" column="laa_acronym" />  
      <result property="laaDescription" column="laa_description" />
      <result property="languaguesTO.lanId"   column="languagues_lan_id" />
  </resultMap>
  
  <statement id="obtenerAcronimos"  resultMap="select-Acron-List" parameterClass="java.lang.String">
     select  *
     from Languagues_acronyms     
 </statement>  

<!--hasta aca lo nuevo-->


  
    
 
  
  <!--statement id="buscarTraductores" resultMap="select-Trad-List"  parameterClass="java.lang.String" >
     select *       
     from translators t, employees e
     where t.employees_emp_id = e.emp_id
     and upper(e.emp_last_name) like '%' || upper( #value#) || '%'
     order by e.emp_last_name
     
  </statement-->

  <delete id="deleteTraductor" parameterClass="com.twoways.to.TranslatorsTO">
        DELETE translators
        WHERE  tra_id = #traId#    
 </delete> 
  <!--Ver-->
  <statement id="getPass"  resultClass="java.lang.String" parameterClass="java.lang.String">
     select  usr_pass
     from  users 
     where upper(usr_id) = upper(#value#)      
  </statement>  

 <select id="obtenerServices"  parameterClass="java.lang.String" resultClass="com.twoways.to.ServicesTO">
     select ser_id as serId , ser_name as serName , ser_description  as serDescription from services
     
  </select> 
  
  
  
  
  <select  id="orders.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
     select order_seq.nextval ordId from dual
  </select> 
  
    <select  id="ordersdoc.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
     select order_doc_seq.nextval ordDocId from dual
  </select> 
    
  <insert id="insertOrders" parameterClass="com.twoways.to.OrdersTO" >
       
  insert into orders
       (ord_id, ord_name, ord_description, ord_date, ord_start_date, ord_finish_date, clients_cli_id, ord_proj_id, ord_wo_number, ord_job_id, ord_job_name, ord_job_description, client_responsable_cre_id)
     values
       (#ordId#, #ordName#, #ordDescription#,sysdate, #ordStartDate#, #ordFinishDate#,  #clientsTO.cliId#, #ordProjId#, #ordWoNumber#, #ordJobId#, #ordJobName#, #ordJobDescription#,  #cliResponsableTO.creId#)
       
   
  </insert>
  
      
  <insert id="insertOrderDoc" parameterClass="com.twoways.to.OrdersDocsTO" >
    insert into orders_docs
      (odo_id, odo_name, orders_ord_id, odo_doc,doc_types_dot_id)
     values
      (#odoId#, #odoName#, #ordersOrdId#,  #odoDoc#, #docType.dotId#)
  </insert>
  
  
  <insert id="insertOrdersRates" parameterClass="com.twoways.to.OrdersRatesTO" >
    insert into orders_rates
           (orders_ord_id, orr_value, rates_rat_id, orr_wcount)
            values
           (#ordersTO.ordId#,#clrValue# ,#ratesTO.ratId#,#orrWcount#)
      
  </insert>

   <resultMap id="select-Order" class="com.twoways.to.OrdersTO" >
      <result property="ordId" column="ord_id" />
      <result property="ordName" column="ord_name"/>
      <result property="ordStartDate"   column="ord_start_date" />
      <result property="ordFinishDate"   column="ord_finish_date" />
      <result property="ordDescription"   column="ord_description" />
      <result property="clientsTO.cliId" column="clients_cli_id"  />
      <result property="ordProjId" column="ord_proj_id" />
      <result property="ordWoNumber" column="ord_wo_number" />
      <result property="ordJobId" column="ord_job_id" />  
      <result property="ordJobName" column="ord_job_name" />
      <result property="ordJobDescription" column="ord_job_description" />
      <result property="clientsTO.cliName" column="cli_name" />
      <result property="cliResponsableTO.creId" column="client_responsable_cre_id"  />      
  </resultMap>
  
  
   
   <resultMap id="select-order-doc" class="com.twoways.to.OrdersDocsTO" >
      <result property="odoId" column="odo_id" />
      <result property="odoName" column="odo_name"/>
      <result property="ordersOrdId"   column="orders_Ord_Id" />
      <result property="docType.dotId"   column="dot_id" />
      <result property="docType.dotName"   column="dot_name" />
      <result property="odoDoc" column="odo_doc"  jdbcType="BLOB" />
  </resultMap>
  

   <statement id="getOrderById" parameterClass="java.lang.Long" resultMap="select-Order" >
       select * 
       from orders left outer join clients on orders.clients_cli_id = clients.cli_Id
       where ord_id = #value#
  
  </statement>
  
  <statement id="getOrderDocById" parameterClass="java.lang.Long" resultMap="select-order-doc" >
    select * from  orders_docs  odo left outer join doc_types dot  on odo.doc_types_dot_id = dot_id
    where odo_id = #odoId#
  </statement>
  
  <statement id="getOrderDocByOrder" parameterClass="java.lang.Long" resultMap="select-order-doc" >
    select * from  orders_docs odo left outer join doc_types dot  on odo.doc_types_dot_id = dot_id
    where orders_Ord_Id = #ordersOrdId#
  </statement>
  
     <resultMap id="select-Ord-Rates" class="com.twoways.to.OrdersRatesTO" >
      <result property="clrValue" column="orr_value" />
      <result property="orrWcount" column="orr_wcount" />
      <result property="orrPayDate" column="orr_pay_date" />
      <result property="ordersTO.ordId" column="orders_ord_id"/>
      <result property="ratesTO.ratId" column="RAT_ID" />
      <result property="ratesTO.ratDescription" column="RAT_DESCRIPTION"/>
      <result property="ratesTO.ratName"   column="RAT_NAME" />
      <result property="ratesTO.rateTypesTO.rtyName" column="RAT_TYPE"  />
      <result property="ratesTO.rateTypesTO.rtyAlternativeName" column="RTY_ALTERNATIVE_NAME"  />
      <result property="ratesTO.currencyTO.curId" column="cur_id"  />
      <result property="ratesTO.currencyTO.curSymbol" column="cur_symbol"  />
   </resultMap>
  
  <statement  id="getOrderRatesByOrderId" resultMap="select-Ord-Rates"  parameterClass="com.twoways.to.OrdersTO" >
     select * from ((orders_rates ord join rates r on ord.rates_rat_id = r.rat_id)left outer join currency cur on 
     r.currency_cur_id = cur.cur_id)  left outer join rate_types rt on  r.rat_type= rt.rty_name
     where  ord.orders_ord_id=#ordId#
  </statement>    
  
  <insert id="insertOrdersServices" parameterClass="java.util.Map" >
    insert into order_services
           (rate_types_rty_name, orders_ord_id)
           values
           (#serId#,#ordId#)
      
  </insert>
  
    <statement  id="getOrderServicesByOrderId" resultClass="com.twoways.to.RateTypesTO"   parameterClass="com.twoways.to.OrdersTO"  >
            select s.rty_name as rtyName,s.rty_description as  rtyDescription,s.RTY_ALTERNATIVE_NAME  as rtyAlternativeName
            from order_services ord join rate_types s on ord.rate_types_rty_name = s.rty_name and ord.orders_ord_id=#ordId#
  </statement> 
    
  <update id="updateOrders" parameterClass="com.twoways.to.OrdersTO" >
         update orders
               set ord_name = #ordName#,
                   ord_description = #ordDescription#,
                   ord_start_date = #ordStartDate#,
                   clients_cli_id = #clientsTO.cliId#,
                   ord_proj_id = #ordProjId#,
                   ord_wo_number = #ordWoNumber#,
                   ord_job_id = #ordJobId#,
                   ord_job_name = #ordJobName#,
                   ord_job_description = #ordJobDescription#,
                   ord_finish_date = #ordFinishDate#,
                   client_responsable_cre_id = #cliResponsableTO.creId#
             where ord_id =#ordId#
  </update>
  

 
   <update id="updateOrdersRates" parameterClass="com.twoways.to.OrdersRatesTO" >
          update  orders_rates
                  set  orr_value= #clrValue#, 
                  orr_wcount = #orrWcount#  
                  where
                  orders_ord_id = #ordersTO.ordId#  and  
                  rates_rat_id = #ratesTO.ratId#
  </update>
  
  
   
  <delete id="deleteOrdersRates" parameterClass="com.twoways.to.OrdersRatesTO"   >
    delete  orders_rates
    where
    orders_ord_id = #ordersTO.ordId#  and  
    rates_rat_id = #ratesTO.ratId#        
  </delete>  
  
  
   <delete id="deleteOrdersServices" parameterClass="java.util.Map"   >
    delete order_services
       where rate_types_rty_name = #serId#
       and orders_ord_id = #ordId#    
  </delete>  
  
  
   <delete id="deleteOrdersDocs" parameterClass="java.util.Map"   >
    delete orders_docs
          where odo_id =#odoId#
          and orders_ord_id = #ordId#
  </delete>  
  
    <!-- Cuentas -->
  <select id="accounts.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select account_seq.nextval accId from dual</select>   

  <insert id="insertAccount" parameterClass="com.twoways.to.AccountsTO" >
      insert into accounts
          (acc_id, acc_name, acc_number, acc_holder, acc_swift_code, acc_wire_transfer, acc_bank, acc_direction, acc_zip_code, acc_country, acc_City, acc_details)
        values
          (#accId#, #accName#, #accNumber#, #accHolder#, #accSwiftCode#, #accWireTransfer#, #accBank#, #accDirection#, #accZipCode#, #accCountry#, #accCity#, #accDetails#)                        
  </insert>

  <update  id="updateAccount" parameterClass="com.twoways.to.AccountsTO">
      UPDATE accounts
         SET acc_name = #accName#, 
             acc_number = #accNumber#,
             acc_holder = #accHolder#,
             acc_Swift_Code = #accSwiftCode#,
             acc_wire_transfer =#accWireTransfer#,
             acc_bank = #accBank#,
             acc_direction= #accDirection#,
             acc_zip_code = #accZipCode#,
             acc_country = #accCountry#,
             acc_city = #accCity#,
             acc_details = #accDetails#,
             acc_erase_Date=sysdate
      WHERE  acc_id = #accId#                     
  </update>  
  
  <resultMap id="select-Account-List"  class="com.twoways.to.AccountsTO" >
      <result property="accName" column="ACC_NAME" />
      <result property="accId"   column="ACC_ID" />
      <result property="accNumber" column="ACC_NUMBER"  />
      <result property="accDescription" column="ACC_DESCRIPTION" />
      <result property="accDetails" column="ACC_DETAILS" /> 
      <result property="accBank" column="ACC_BANK" />
      <result property="accHolder" column="ACC_HOLDER"  />
      <result property="accSwiftCode" column="ACC_SWIFT_CODE" />
      <result property="accWireTransfer" column="ACC_WIRE_TRANSFER" /> 
      <result property="accDirection" column="ACC_DIRECTION" />      
        <result property="accZipCode" column="ACC_ZIP_CODE" />
      <result property="accCountry" column="ACC_COUNTRY" /> 
      <result property="accCity" column="ACC_CITY" />     
  </resultMap>
    
  <statement id="buscarAccounts" resultMap="select-Account-List"  parameterClass="java.lang.String" >
     select *       
     from accounts
     where upper(ACC_NAME) like '%' || upper( #value#) || '%'
     order by ACC_NAME
     
  </statement>

  <delete id="deleteAccount" parameterClass="com.twoways.to.AccountsTO">
        DELETE Accounts
        WHERE  acc_id = #accId#    
 </delete> 
  
   <select id="getAccountById" parameterClass="java.lang.String" resultMap="select-Account-List">
     select *
     from Accounts 
     where acc_id = #value#
 </select>

  <statement id="obtenerAccounts" resultMap="select-Account-List"  parameterClass="java.lang.String" >
     select *       
     from accounts     
     order by ACC_NAME
     
  </statement>

 <statement id="obtenerEspecializaciones"  resultClass="com.twoways.to.SpecializationsTO" parameterClass="java.lang.String">
     select  spe_Name as speName, 
             spe_description as speDescription 
     from Specializations     
  </statement>  


  <!--proyectos -->
  
  <select id="project.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select project_seq.nextval accId from dual</select>   
  
 
   <resultMap id="select-project-obj"  class="com.twoways.to.ProjectsTO" >
      <result property="proId" column="pro_id" />
      <result property="proName"   column="pro_name" />
      <result property="proDescription" column="pro_description"  />
      <result property="proStatus" column="states_sta_id" />
      <result property="proTotalCliWcount" column="pro_total_cli_wcount" />     
      <result property="proTotalClient" column="pro_total_client" />     
      <result property="proTotalTranWcount" column="pro_total_tran_wcount" />     
      <result property="proTotalTranslator" column="pro_total_translator" />     
      <result property="proStartDate" column="pro_start_date" />     
      <result property="proFinishDate" column="pro_finish_date" />     
      <result property="currencyCotizationsCucId" column="currency_cotizations_cuc_id" /> 
      <result property="usersUsrId" column="users_usr_id" />     
      <result property="currencyTO.curId" column="cur_id" />
      <result property="currencyTO.curName" column="cur_name" />
      <result property="currencyTO.curSymbol" column="cur_symbol" />
      <result property="ordersTO.ordId"  column="orders_ord_id"/> 
      <result property="statesTO.staId"  column="sta_id"/> 
      <result property="statesTO.staName"  column="sta_name"/> 
      <result property="proDate" column="pro_date" /> 
      
  </resultMap>
  
  
  <select id="getProjectById" parameterClass="java.lang.Long" resultMap="select-project-obj">
     select *
     from (projects left outer join currency on currency_cur_id = cur_id) left outer join states on states_sta_id = states.sta_Id 
     where pro_id = #value#
 </select>
 
 <select id="getProjectByOrdId" parameterClass="java.lang.Long" resultMap="select-project-obj">
     select *
     from (projects  left outer join currency on currency_cur_id = cur_id) left outer join states on states_sta_id = states.sta_Id 
     where orders_ord_id = #value#
 </select>
  
   <insert id="insertProject" parameterClass="com.twoways.to.ProjectsTO"   >
       
      insert into projects
          (pro_id, pro_name, pro_description,  pro_total_cli_wcount, pro_total_client, pro_total_tran_wcount, pro_total_translator, pro_start_date, pro_finish_date, currency_cotizations_cuc_id, users_usr_id, currency_cur_id, orders_ord_id, pro_date, states_sta_id)
        values
          (#proId#, #proName#, #proDescription#,#proTotalCliWcount#,#proTotalClient#,#proTotalTranWcount#,#proTotalTranslator#,#proStartDate#,#proFinishDate#,#currencyCotizationsCucId#,#usersUsrId#,#currencyTO.curId#,#ordersTO.ordId#,sysdate,#statesTO.staId#)  
  </insert>      
    <insert id="updateProject" parameterClass="com.twoways.to.ProjectsTO"   >
       update projects
    set pro_id = #proId#,
        pro_name =#proName#,
        pro_description =#proDescription#,
        pro_total_cli_wcount =#proTotalCliWcount#,
        pro_total_client =#proTotalClient#,
        pro_total_tran_wcount =#proTotalTranWcount#,
        pro_total_translator =#proTotalTranslator#,
        pro_start_date =#proStartDate#,
        pro_finish_date =#proFinishDate#,
        currency_cotizations_cuc_id =#currencyCotizationsCucId#,
        users_usr_id =#usersUsrId#,
        currency_cur_id =#currencyTO.curId#,
        orders_ord_id =#ordersTO.ordId#,
        pro_date =#proDate#,
        states_sta_id = #statesTO.staId#
  where pro_id =#proId#
     
  </insert>      
   
  <select id="getOldTransLangByEmpId" parameterClass="java.lang.Long" resultMap="select-Trans-Lang">
     select * from translators_languagues t
     where t.employees_emp_id=#empId#
     and t.tla_erase_Date is null
  </select>
  
   <select id="projectAss.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > select project_ass_seq.nextval accId from dual</select>   
 
  <select id="obtenerTraductorByEmpId" parameterClass="java.lang.String" resultClass="java.lang.Long">
     select t.tra_id from translators t
     where t.employees_emp_id=#value#
  </select>
  
  
   <insert id="insertProjectAssigment" parameterClass="com.twoways.to.ProjectAssignmentsTO"   >
       
      insert into project_assignments
          (pra_id, employees_emp_id, projects_pro_id, pra_assign_date, pra_finish_date, services_ser_id)
        values
          (#praId#, #employeesTO.empId#, #projectsTO.proId#, #praAssignDate#, #praFinishDate#, #serviceTO.rtyName#)
          
  </insert>
  
  
    <insert id="updateProjectAssigment" parameterClass="com.twoways.to.ProjectAssignmentsTO"   >
      update project_assignments
       set employees_emp_id =  #employeesTO.empId#,
           projects_pro_id = #projectsTO.proId#,
           pra_assign_date = #praAssignDate#,
           pra_finish_date = #praFinishDate#,
           services_ser_id =  #serviceTO.rtyName#
         where pra_id =#praId#
           and employees_emp_id = #employeesTO.empId#
           and projects_pro_id = #projectsTO.proId#
         
  </insert>
  
  
  
    <insert id="updateProjectAssigmentFromDetails" parameterClass="com.twoways.to.ProjectAssignmentsTO"   >
      update project_assignments
       set   pra_total_amount = #praTotalAmount#
         where pra_id =#praId#
           
  </insert>      
  
   <statement id="obtenerEspecializacionesByTraId"  resultClass="com.twoways.to.SpecializationsTO" parameterClass="java.lang.Long">
     select  spe_Name as speName, 
             spe_description as speDescription 
     from Specializations  s
     where s.spe_name not in (select t.specializations_spe_name from translators_specializations t
                              where t.translators_tra_id = #traId#)
  </statement>  
  
  <update  id="updateClientsResponsable" parameterClass="com.twoways.to.ClientResponsableTO"   >
     update client_responsable
     set cre_First_Name = #creFirstName#,
         cre_Last_Name = #creLastName#,
         cre_email = #creEmail#,
         cre_phone_number = #crePhoneNumber#,
         cre_skype = #creSkype#,
         cre_msn = #creMsn#,
         cre_erase_date=null
     where cre_id=#creId#
  </update>
 
  <update  id="deleteClientsResponsable" parameterClass="com.twoways.to.ClientResponsableTO"   >
     update client_responsable
     set cre_erase_date = sysdate
     where cre_id=#creId#
  </update>
  
  
  <resultMap id="select-projectAssignament-obj"  class="com.twoways.to.ProjectAssignmentsTO" >
      <result property="praId" column="pra_id" />
      <result property="employeesTO.empId"   column="employees_emp_id" />
      <result property="employeesTO.empFirstName"   column="emp_first_name" />
      <result property="employeesTO.empLastName"   column="emp_last_name" />
      <result property="praAssignDate" column="pra_assign_date"  />
      <result property="praFinishDate" column="pra_finish_date" />
      <result property="serviceTO.rtyName" column="services_ser_id" />     
      <result property="praTotalAmount" column="pra_total_amount" />     
      <result property="projectsTO.proId" column="projects_pro_id" />    
      <result property="serviceTO.rtyAlternativeName" column="rty_alternative_name" />    
  </resultMap>
  
  <select id="getProjectAssignamentByPraId" parameterClass="java.lang.Long" resultMap="select-projectAssignament-obj">
     select * from (((project_assignments  pa left outer join employees e on pa.employees_emp_id = e.emp_id) left outer join rate_types r  on pa.services_ser_id = r.rty_name) 
     left outer join states s on pa.states_sta_id = s.sta_id) 
     where pra_Id= #value#
     order by pa.employees_emp_id,pa.pra_assign_date
 </select>
 
 
 <select id="getProjectAssignamentByProId" parameterClass="java.lang.Long" resultMap="select-projectAssignament-obj">
     select * from (((project_assignments  pa left outer join employees e on pa.employees_emp_id = e.emp_id) left outer join rate_types r  on pa.services_ser_id = r.rty_name) 
     left outer join states s on pa.states_sta_id = s.sta_id) 
     where  pa.projects_pro_id= #value#
     order by pa.employees_emp_id,pa.pra_assign_date

 </select>
 
  <select id="projectAssDet.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
        select proj_assign_det_seq.nextval from dual    
  </select>   
 
  
  <insert id="insertProjectAssigmentDetails" parameterClass="com.twoways.to.ProAssigmentsDetailsTO"   >
       
      insert into proj_assignments_details
          (pad_id, project_assignments_pra_id, project_assignments_employees_, project_assignments_projects_p, orders_docs_odo_id, orders_docs_orders_ord_id,  employees_rates_rates_rat_id, employees_rates_employees_emp_, pad_rate , translators_languagues_tla_id)
        values
          (#padId#,#projectAssignmentsTO.praId#,#projectAssignmentsTO.employeesTO.empId#,#projectAssignmentsTO.projectsTO.proId#, #ordersDocsTO.odoId#, #ordersDocsTO.ordersOrdId#, #employeesRatesTO.ratesTO.ratId#,#employeesRatesTO.employeesTO.empId#, #employeesRatesTO.emrValue#, #pranslatorsLanguaguesTO.tlaId# )       
  </insert>
  
  
    <insert id="updateProjectAssigmentDetails" parameterClass="com.twoways.to.ProAssigmentsDetailsTO"   >
     update proj_assignments_details
           set orders_docs_odo_id = #ordersDocsTO.odoId#,
               orders_docs_orders_ord_id = #ordersDocsTO.ordersOrdId#,
               employees_rates_rates_rat_id = #employeesRatesTO.ratesTO.ratId# ,
               employees_rates_employees_emp_ = #employeesRatesTO.employeesTO.empId# ,
               translators_languagues_tla_id = #pranslatorsLanguaguesTO.tlaId#,
               pad_rate = #padRate#
     where project_assignments_pra_id = #projectAssignmentsTO.praId# 
               and  orders_docs_odo_id = #ordersDocsTO.odoId#
               and  orders_docs_orders_ord_id = #ordersDocsTO.ordersOrdId#
               and employees_rates_rates_rat_id = #employeesRatesTO.ratesTO.ratId# 
               and employees_rates_employees_emp_ = #employeesRatesTO.employeesTO.empId#
                     
  </insert>      
  
  <insert id="updateProjectAssigmentDetailsByPadId" parameterClass="com.twoways.to.ProAssigmentsDetailsTO"   >
     update proj_assignments_details
           set 
               pad_wcount = #padWCount#,
               pad_rate = #padRate#
     where   pad_id = #padId#
                     
  </insert>   
  
  
  
    <insert id="updateProjectAssigmentDetailsLanguage" parameterClass="com.twoways.to.ProAssigmentsDetailsTO"   >
     update proj_assignments_details
           set translators_languagues_tla_id = #pranslatorsLanguaguesTO.tlaId#
     where project_assignments_pra_id = #projectAssignmentsTO.praId# 
               and  orders_docs_odo_id = #ordersDocsTO.odoId#
               and  orders_docs_orders_ord_id = #ordersDocsTO.ordersOrdId#
               and  pad_id = #padId#
               
    </insert>      
  
  
    
    <delete id="deleteProjectAssigmentDetailsByPraId" parameterClass="java.util.Map"   >
     delete  proj_assignments_details
        where project_assignments_pra_id = #praId# 
        and  orders_docs_odo_id = #odoId#
                     
    </delete>      
    
    <delete id="deleteProjectAssigmentDetailsByAssingPraId" parameterClass="java.lang.String"   >
     delete  proj_assignments_details
        where project_assignments_pra_id = #praId# 
                     
    </delete>      
    
    
    
   <delete id="deleteProjectAssigmentByPraId" parameterClass="java.util.Map"   >
      delete project_assignments
      where pra_id = #praId# 
      and projects_pro_id = #proId#
   </delete> 
   
    
  
  <resultMap id="select-projectAssignamentDetails-obj"  class="com.twoways.to.ProAssigmentsDetailsTO" >
      <result property="padId" column="PAD_ID" />
      <result property="projectAssignmentsTO.praId"   column="PROJECT_ASSIGNMENTS_PRA_ID" />
      <result property="ordersDocsTO.odoId" column="ORDERS_DOCS_ODO_ID" />     
      <result property="ordersDocsTO.docType.dotId" column="DOC_TYPES_DOT_ID" />     
      <result property="padWCount" column="PAD_WCOUNT" />     
      <result property="ordersDocsTO.ordersOrdId" column="orders_docs_orders_ord_id" />  
      <result property="employeesRatesTO.ratesTO.ratId" column="employees_rates_rates_rat_id" />
      <result property="employeesRatesTO.employeesTO.empId" column="employees_rates_employees_emp_" />     
      <result property="pranslatorsLanguaguesTO.tlaId" column="translators_languagues_tla_id" />     
      <result property="padRate" column="pad_rate" /> 
  </resultMap>
  
  <select id="getProjectAssigmentDetailsByPraId" parameterClass="java.lang.Long" resultMap="select-projectAssignamentDetails-obj">
     select *
     from proj_assignments_details pa, orders_docs odo
     where odo.odo_id = pa.orders_docs_odo_id
     and odo.orders_ord_id = pa.orders_docs_orders_ord_id
     where project_assignments_pra_id = #value#
 </select>
 
 <delete id="deleteProjectAssigmentDetails"  parameterClass="com.twoways.to.ProAssigmentsDetailsTO"   >
      delete proj_assignments_details  where pad_id = #padId#
 </delete>
 
   <select id="getProjectAssigmentDetailsByPad" parameterClass="com.twoways.to.ProAssigmentsDetailsTO" resultMap="select-projectAssignamentDetails-obj">
     select *
     from proj_assignments_details pa, orders_docs odo
     where odo.odo_id = pa.orders_docs_odo_id
     and odo.orders_ord_id = pa.orders_docs_orders_ord_id
     and project_assignments_pra_id = #projectAssignmentsTO.praId# 
     and  orders_docs_odo_id = #ordersDocsTO.odoId#
     and  orders_docs_orders_ord_id = #ordersDocsTO.ordersOrdId#
     and employees_rates_rates_rat_id = #employeesRatesTO.ratesTO.ratId# 
     and employees_rates_employees_emp_ = #employeesRatesTO.employeesTO.empId#
              
 </select>
 
  
    <resultMap id="select-projectAssignamentDetails-complete"  class="com.twoways.to.ProAssigmentsDetailsTO" >
      <result property="padId" column="PAD_ID" />
      <result property="pranslatorsLanguaguesTO.tlaId" column="TRANSLATORS_LANGUAGUES_TLA_ID" />   
      <result property="pranslatorsLanguaguesTO.langAcronymsTO.languaguesTO.lanName" column="LEN1" />  
      <result property="pranslatorsLanguaguesTO.langAcronymsTO.languaguesTO.lanShortName" column="LSHNAME1" />   
      <result property="pranslatorsLanguaguesTO.langAcronymsTO1.languaguesTO.lanName" column="LEN2" />    
      <result property="pranslatorsLanguaguesTO.langAcronymsTO1.languaguesTO.lanShortName" column="LSHNAME2" />         
      <result property="pranslatorsLanguaguesTO.langAcronymsTO1.laaAcronym" column="ACRO2" />  
      <result property="pranslatorsLanguaguesTO.langAcronymsTO.laaAcronym" column="ACRO1" />  
      <result property="projectAssignmentsTO.praId"   column="PROJECT_ASSIGNMENTS_PRA_ID" />
      <result property="ordersDocsTO.odoId" column="ORDERS_DOCS_ODO_ID" />     
      <result property="padWCount" column="PAD_WCOUNT" />     
      <result property="ordersDocsTO.ordersOrdId" column="ORDERS_DOCS_ORDERS_ORD_ID" />  
      <result property="ordersDocsTO.odoName" column="DOCNAME"  />  
      <result property="employeesRatesTO.ratesTO.ratId" column="EMPLOYEES_RATES_RATES_RAT_ID" />
      <result property="employeesRatesTO.ratesTO.ratName" column="RAT_NAME" />
      <result property="employeesRatesTO.employeesTO.empId" column="EMPLOYEES_RATES_EMPLOYEES_EMP_" />     
      <result property="padRate" column="PAD_RATE" /> 
  </resultMap>
  
  <select id="getProjectAssigmentDetailsByPadMap" parameterClass="java.lang.Long" resultClass="java.util.HashMap">
     select pad.* , l1.lan_name  len1 ,l1.lan_short_name LSHNAME1 , l2.lan_name  len2, l2.lan_short_name LSHNAME2, o.odo_name docName , tl.languagues_acronyms_laa_acrony acro1  ,  tl.languagues_acronyms_laa_acron1 acro2,  r.rat_name, cu.cur_name , cu.cur_symbol, cu.cur_id , o.doc_types_dot_id
     from (((((((proj_assignments_details pad left outer join employees_rates er on pad.employees_rates_employees_emp_ = er.employees_emp_id and pad.employees_rates_rates_rat_id = er.rates_rat_id) left outer join 
     rates r on  er.rates_rat_id = r.rat_id ) left outer join orders_docs o  on o.odo_id = pad.orders_docs_odo_id and pad.orders_docs_orders_ord_id = o.orders_ord_id ) left outer join
     translators_languagues tl on pad.translators_languagues_tla_id = tl.tla_id) )left outer join  languagues l1 on  tl.languagues_acronyms_languagues = l1.lan_id ) left outer join  languagues l2 on 
     tl.languagues_acronyms_languague1 = l2.lan_id ) left outer join currency cu on r.currency_cur_id = cu.cur_id
     where  pad.project_assignments_pra_id = #value# order by o.odo_name
 </select>
 
 <select id="findProjectAssignament" parameterClass="java.util.Map" resultClass="java.lang.Long">
     select pa.pra_id from project_assignments pa
                where pa.employees_emp_id = #emp#
                and pa.services_ser_id =#serv#
                and pa.projects_pro_id = #proId#
                and pa.pra_assign_date = to_date( #praDate#, 'dd/mm/yyyy hh24:mi') 
 </select> 
 
 <select id="findProjectAssignamentAvailability" parameterClass="java.util.Map" resultClass="java.lang.Long">
     select count(*)
        from employees e, proj_assignments_details a, project_assignments p
        where e.emp_id = a.project_assignments_employees_
        and a.project_assignments_pra_id = p.pra_id
        and to_date( #praDate#, 'dd/mm/yyyy hh24:mi')  between p.pra_assign_date and p.pra_finish_date
        and #empId# = e.emp_id 
 </select> 
 

  <statement id="obtenerItems" resultMap="select-Item-List"  parameterClass="java.lang.String" >
     select *       
     from items
     where upper(items.ITM_TYPE) like '%' || upper( #value#) || '%'
     and items.itm_erase_date is null
     order by items.ITM_NAME    
  </statement>
  
  <!-- Expenses-->
  
  <select id="expense.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
      select expense_seq.nextval expId from dual
  </select>   
  
  <select id="item_expense.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
      select item_expense_seq.nextval expId from dual
  </select>   
  
  <insert id="insertExpense" parameterClass="com.twoways.to.ExpensesTO" >
      insert into expenses
      (exp_id, exp_date)
      values (#expId#, #expDate#)
  </insert>
  
  <insert id="insertItemsExpenses" parameterClass="com.twoways.to.ItemsExpensesTO">
      insert into items_expenses
      (ite_id, ite_value, items_itm_id, expenses_exp_id, currency_cur_id, accounts_acc_id, users_usr_id)
      values
      (#iteId#, #iteValue#, #itemsTO.itmId#, #expensesTO.expId#, #currencyTO.curId#, #accountsTO.accId#, #usersTO.usrId#)
  </insert>
  
  <resultMap id="select-items-expenses" class="com.twoways.to.ItemsExpensesTO">
        <result property="iteId" column="ITE_ID"  />  
        <result property="iteValue" column="ITE_VALUE" />     
        <result property="itemsTO.itmId" column="ITEMS_ITM_ID"  />
        <result property="currencyTO.curId" column="CURRENCY_CUR_ID"  /> 
        <result property="accountsTO.accId" column="ACCOUNTS_ACC_ID"  /> 
        <result property="usersTO.usrId" column="USERS_USR_ID"  />   
  </resultMap>
  
  <resultMap id="select-expenses" class="com.twoways.to.ExpensesTO">
        <result property="expId" column="EXP_ID"  />  
        <result property="expDate" column="EXP_DATE" />     
        <result property="expTotal" column="EXP_TOTAL"  /> 
  </resultMap>
  
  <select id="getExpenseById" parameterClass="java.lang.Long" resultMap="select-expenses">
       select *
       from expenses
       where exp_id=#value#
       and exp_erase_date is null
  </select>

  <select  id="getItemsExpenseByDate" resultClass="java.util.HashMap"  parameterClass="java.lang.String" >
       select e.exp_id as exp_id,
       i.ite_id as ite_id,
       s.itm_name as itm_name, 
       c.cur_name as cur_name, 
       i.ite_value as ite_value, 
       a.acc_name as acc_name, 
       u.usr_id as usr_id, 
       e.exp_date as exp_date, 
       i.items_itm_id as itm_id,
       i.currency_cur_id as cur_id,
       i.accounts_acc_id as acc_id
       from items_expenses i, accounts a, users u, currency c, expenses e, items s
       where i.expenses_exp_id=e.exp_id
       and i.items_itm_id=s.itm_id
       and i.expenses_exp_id=e.exp_id
       and i.currency_cur_id=c.cur_id
       and i.users_usr_id=u.usr_id
       and i.accounts_acc_id = a.acc_id       
       and e.exp_date = to_date(#itmFecha#,'dd/mm/rrrr')
       and e.exp_erase_date is null
  </select>

  <update  id="deleteExpense" parameterClass="java.lang.Long"   >
     update expenses
     set exp_erase_date = sysdate
     where exp_id=#expId#
  </update>
  
  <update  id="updateExpense" parameterClass="com.twoways.to.ExpensesTO"   >
     update expenses
     set exp_erase_date = null,
     exp_date = #expDate#
     where exp_id=#expId#
  </update>
  
    <insert id="updateItemsExpenses" parameterClass="com.twoways.to.ItemsExpensesTO">
        update items_expenses
        set ite_value = #iteValue#,
            items_itm_id = #itemsTO.itmId#,
            expenses_exp_id = #expensesTO.expId#,
            currency_cur_id = #currencyTO.curId#,
            accounts_acc_id = #accountsTO.accId#,
            users_usr_id = #usersTO.usrId#
        where ite_id = #iteId#
    </insert>
    
    <delete id="deleteItemsExpenses" parameterClass="com.twoways.to.ItemsExpensesTO">
        delete from items_expenses
        where ite_id = #iteId#
    </delete>

    
    <select id="getItemsExpensesByItmId"  parameterClass="com.twoways.to.ExpensesTO" resultMap="select-items-expenses">
        select *
        from items_expenses
        where expenses_exp_id=#expId#
    </select>

  <statement id="buscarListaEmpleados" resultClass="java.util.HashMap"  parameterClass="java.lang.String" >
        select empId,
               empFirstName,
               empLastName,
               empMail,
               empMobile,
               empType,
               pa.states_sta_id         as empState,
               pa.pra_assign_date       as empAssDate,
               pa.pra_finish_date       as empFinDate,
               p.pro_name               as projName,
               p.states_sta_id          as projState,
               p.pro_finish_date        as projEndDate            
        from (select e.emp_id           as empId,
               e.emp_first_name         as empFirstName,
               e.emp_last_name          as empLastName,
               e.emp_mail               as empMail,
               e.emp_mobile_number      as empMobile,
               t.employee_type_ety_name as empType
               from employees e, employees_types t
               where ((upper(EMP_FIRST_NAME) like '%' || upper(#value#) || '%')or
                      (upper(EMP_LAST_NAME) like '%' || upper('#value#') || '%'))
               and e.emp_id = t.employees_emp_id) q
        left outer join 
        project_assignments pa
        on q.empid = pa.employees_emp_id
        and q.empType = pa.services_ser_id
        left outer join projects p 
        on pa.projects_pro_id = p.pro_id
  </statement>
 
  <select id="getProjectAssignamentByEmpId" parameterClass="java.util.Map" resultClass="java.util.HashMap">
        select pa.pra_id as praId,
               pa.pra_assign_date as praAssDate,       
               p.pro_id as projId,
               p.pro_name as projName,
               r.rat_name as ratName,
               c.cur_symbol as curSymbol,
               pd.pad_rate as ratValue,
               pd.pad_wcount as wCount,
               decode(pd.pad_wcount,1,pd.pad_rate,null,0,(pd.pad_rate * pd.pad_wcount)) as praTotal,
               pa.employees_emp_id as empId,
               pd.pad_id as padid,
               c.cur_id as curId,
               p.orders_ord_id as ordId
          from project_assignments pa , projects p, proj_assignments_details pd, rates r, currency c
         where pa.employees_emp_id = #empId#
         and pa.projects_pro_id = p.pro_id
         and pd.project_assignments_pra_id = pa.pra_id
         and pd.project_assignments_employees_ = pa.employees_emp_id
         and pd.project_assignments_projects_p = pa.projects_pro_id
         and r.rat_id = pd.employees_rates_rates_rat_id
         and pa.pra_assign_date between add_months(to_date(#mesId#||'00:00','ddMMyyyy hh24:mi')+1,-1) and to_date(#mesId#||'23:59','ddMMyyyy hh24:mi')
         and r.currency_cur_id=c.cur_id
         and pd.pad_pay_date is null
         order by pa.pra_assign_date
  </select>

  <select id="payment.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
      select payment_seq.nextval payId from dual
  </select>   
  
  <insert id="insertPayment" parameterClass="com.twoways.to.PaymentsTO" >
      insert into payments
      (pay_id, pay_date, pay_description, pay_observation, pay_amount, accounts_acc_id, currency_cur_id, employees_emp_id, users_Usr_Id)
      values (#payId#, #payDate#, #payDescription#, #payObservation#, #payAmount#, #accountsTO.accId#, #currencyTO.curId#, #employeeTO.empId#, #userTO.usrId#)
  </insert>
  
    <insert id="insertProjAssignPay" parameterClass="com.twoways.to.ProjAssignPaysTO" >
      insert into proj_assign_pays
      (payments_pay_id, proj_assignments_details_pad_i)
      values (#paymentsTO.payId#, #proAssigmentsDetailsTO.padId#)
  </insert>

  <resultMap id="select-Cotization" class="com.twoways.to.CotizationsTO" >
      <result property="cucId" column="cuc_Id" />  
      <result property="cucDate" column="cuc_Date" />
      <result property="cucValue" column="cuc_Value" />
      <result property="currencyTO.curName" column="cur_Name" />  
  </resultMap> 

   <statement  id="buscarCotizaciones" resultMap="select-Cotization"  parameterClass="java.lang.String" >
        select cuc_id, cuc_date, cuc_value, cur_name
        from currency_cotizations cuc, currency c 
        where currency_cur_id =  #curId#
        and currency_cur_id=cur_Id
        order by cuc_date desc 
   </statement>     
 
  <select  id="currency_cot.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
        select CURRENCY_COT_SEQ.nextval cucId from dual
  </select> 
 
  <insert id="insertarCotizacion" parameterClass="com.twoways.to.CotizationsTO"   >
       
      insert into currency_cotizations
          (cuc_id, cuc_date, cuc_value, currency_cur_id)
        values
          (#cucId#, #cucDate#, #cucValue#,#currencyTO.curId#)
         
  </insert>      

  <delete id="deleteCotizacion" parameterClass="com.twoways.to.CotizationsTO"   >
    delete  currency_cotizations
    where
    cuc_id = #cucId#          
  </delete> 

  <select id="getOrdersByCliId" parameterClass="java.util.Map" resultClass="java.util.HashMap" >
          select o.ord_id as ordId,
               o.ord_name as ordName,
               o.ord_description as ordDescription,
               o.ord_start_date as ordStartDate,
               o.ord_proj_id as ordProjId,
               o.ord_wo_number as ordWoNumber,
               o.ord_job_id as ordJobId,
               o.ord_job_name as ordJobName,
               o.ord_job_description as ordJobDescription,
               t.rat_id as ratId,
               t.rat_name as ratName,
               y.cur_id as curId,
               y.cur_symbol as curSymbol,
               r.orr_value as orrValue,
               r.orr_wcount as orrWcount,
               cr.cre_first_name||' '||cr.cre_last_name as creName,
               p.rty_alternative_name as rateTypeName,
               (r.orr_value * r.orr_wcount) as ordTotal
        from orders o, orders_rates r, client_responsable cr, rates t, currency y, order_services os, rate_types p
        where o.ord_id = r.orders_ord_id
        and o.client_responsable_cre_id=cr.cre_id
        and o.ord_id = os.orders_ord_id
        and o.clients_cli_id = #cliId#
        and r.rates_rat_id = t.rat_id
        and t.currency_cur_id = y.cur_id
        and os.rate_types_rty_name = t.rat_type
        and os.rate_types_rty_name=p.rty_name
        and r.orr_pay_date is null
        and to_date(o.ord_start_date,'dd/MM/rrrr') between to_date(#mesId#,'MMyyyy') and last_day(to_date(#mesId#,'MMyyyy'))
  </select>

  <select id="invoice.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
      select invoice_seq.nextval invId from dual
  </select>   
  
  <insert id="insertInvoice" parameterClass="com.twoways.to.InvoicesTO" >
      insert into invoices
      (inv_id, inv_date, inv_total, accounts_acc_id, currency_cur_id, clients_cli_id, users_Usr_Id, inv_invoiced)
      values (#invId#, #invDate#, #invTotal#, #accountsTO.accId#, #currencyTO.curId#, #clientsTO.cliId#, #usersTO.usrId#, #invInvoiced#)
  </insert>

  <select id="iteminvoice.seq" resultClass="java.lang.Long" parameterClass="java.lang.String" > 
      select item_invoice_seq.nextval itmInvId from dual
  </select>   
  
    <insert id="insertItemsInvoices" parameterClass="com.twoways.to.ItemsInvoicesTO" >
      insert into items_invoices
      (iti_id, iti_value, items_itm_id, invoices_inv_id, orders_rates_orders_ord_id, orders_rates_rates_rat_id, currency_cur_id)
      values (#itiId#, #itiValue#, #itemsTO.itmId#, #invoicesTO.invId#, #ordersRatesTO.ordersTO.ordId#, #ordersRatesTO.ratesTO.ratId#, #currencyTO.curId#)
  </insert>
  
  <update id="updateProjAssign" parameterClass="java.lang.Long" >
    update proj_assignments_details
    set pad_pay_date=sysdate
    where pad_id=#padId#
  </update>
  
  <select id="getPaymentById"  parameterClass="java.lang.Long" resultClass="com.twoways.to.PaymentsTO">
        select *
        from payments
        where pay_id=#payId#
  </select>
  
    <update id="updateOrderRatePayDate" parameterClass="com.twoways.to.OrdersRatesTO" >
    update orders_rates
    set orr_pay_date=sysdate
    where orders_ord_id= #ordersTO.ordId#
    and rates_rat_id = #ratesTO.ratId#
  </update>
  
  <select id="getAllOrdersByCliId" parameterClass="java.lang.Long" resultClass="java.util.HashMap" >
    select t.inv_id as invId,
           i.iti_id as itiId,
           c.cli_name as cliName,
           o.ord_name as ordName,
           t.inv_date as invDate,
           o.ord_proj_id as po,
           o.ord_job_id as jobId,
           o.ord_wo_number as wo,
           o.ord_job_name as jobName,
           a.acc_name as accName,
           y.cur_name as curName,
           t.inv_total as invTotal,
           t.inv_invoiced as invInvoiced
    from invoices t, items_invoices i, clients c, orders o, accounts a, currency y
    where t.inv_id = i.invoices_inv_id
    and i.orders_rates_orders_ord_id=o.ord_id
    and t.clients_cli_id=c.cli_id
    and t.accounts_acc_id=a.acc_id
    and t.currency_cur_id=y.cur_id
  </select>
  

  
  
  <select id="getStatesByType"  parameterClass="java.lang.String" resultClass="com.twoways.to.StatesTO">
       select sta_id as staId,
              sta_name as staName,
              sta_type as staType,
              sta_description staDescription  
              from states 
              where sta_type = #value#
  </select>
  
  <select id="getOrdersByCliIdInvId" parameterClass="java.util.Map" resultClass="java.util.HashMap" >
            select o.ord_id as ordId,
               o.ord_name as ordName,
               o.ord_description as ordDescription,
               o.ord_start_date as ordStartDate,
               o.ord_proj_id as ordProjId,
               o.ord_wo_number as ordWoNumber,
               o.ord_job_id as ordJobId,
               o.ord_job_name as ordJobName,
               o.ord_job_description as ordJobDescription,
               t.rat_id as ratId,
               t.rat_name as ratName,
               y.cur_id as curId,
               y.cur_symbol as curSymbol,
               r.orr_value as orrValue,
               r.orr_wcount as orrWcount,
               cr.cre_first_name||' '||cr.cre_last_name as creName,
               e.rty_alternative_name as rateTypeName,
               (r.orr_value * r.orr_wcount) as ordTotal,
               s.itm_name as itmName
        from orders o, orders_rates r, client_responsable cr, order_services os, rates t, currency y, rate_types e, items_invoices i, items s
        where o.ord_id = r.orders_ord_id
        and o.client_responsable_cre_id = cr.cre_id
        and o.ord_id = os.orders_ord_id
        and o.clients_cli_id = #cliId#
        and r.rates_rat_id = t.rat_id
        and t.currency_cur_id = y.cur_id
        and os.rate_types_rty_name = e.rty_name
        and i.orders_rates_orders_ord_id = r.orders_ord_id
        and i.orders_rates_rates_rat_id = r.rates_rat_id
        and i.items_itm_id = s.itm_id        
        and i.invoices_inv_id = #invoiceId#
  </select>
  
  <update id="updateInvoice" parameterClass="java.lang.Long" >
    update invoices
    set inv_invoiced='si'
    where inv_id=#invId#
  </update>
  
  <select id="getClientName" parameterClass="java.lang.Long" resultClass="java.lang.String">
    select cli_name as cliName
    from clients
    where cli_id=#cliId#
  </select>
  
  <select id="getItemsInvoiceByInvId" parameterClass="java.lang.Long" resultClass="java.util.HashMap" >
    select o.ord_name as ordName,
           o.ord_proj_id as projId,
           o.ord_wo_number as woNumber,
           o.ord_job_id as jobId,
           o.ord_job_name as jobName,
           o.ord_start_date as ordStartDate,
           o.ord_job_description as jobDesc,
           i.itm_name as itmName,
           r.rat_name as ratName,
           l.orr_wcount as orrWcount,
           c.cur_symbol||' '|| l.orr_value as orrValue,
           (l.orr_wcount*l.orr_value) as itemTotal,
           p.cre_first_name||' '||p.cre_last_name as cliResp
    from invoices u, items_invoices t, items i, orders o, rates r, currency c, client_responsable p, orders_rates l
    where t.invoices_inv_id = #invId#
    and t.items_itm_id=i.itm_id
    and t.orders_rates_orders_ord_id=o.ord_id
    and t.orders_rates_rates_rat_id=r.rat_id
    and t.currency_cur_id=c.cur_id
    and t.invoices_inv_id=u.inv_id
    and o.client_responsable_cre_id=p.cre_id
    and l.orders_ord_id=o.ord_id
    and l.rates_rat_id=r.rat_id
    </select>
    
    <resultMap id="select-client-responsables" class="com.twoways.to.ClientResponsableTO" >
      <result property="creId" column="cre_Id" />  
      <result property="creFirstName" column="cre_First_Name" />
      <result property="creLastName" column="cre_Last_Name" />
      <result property="clientsTO.cliId" column="clients_cli_id" />

    </resultMap>
  
    <select id="obtenerClientResponsables" resultMap="select-client-responsables">
        select * 
        from client_responsable
        where cre_erase_date is null
    </select>
    
    <select id="existeTraductor" parameterClass="com.twoways.to.TranslatorsTO" resultClass="java.lang.Long">
        select tra_id
        from translators
        where employees_emp_id=#employeesTO.empId#
    </select>
    
    
    <select id="getEditorByDocId" parameterClass="java.util.Map" resultMap="select-Employee">
        select e.*
        from employees e,proj_assignments_details t, project_assignments a
        where e.emp_id=t.employees_rates_employees_emp_
        and e.emp_id=a.employees_emp_id
        and a.projects_pro_id=t.project_assignments_projects_p
        and a.pra_id != #praId#
        and a.services_ser_id = 'Editor'
        and t.project_assignments_pra_id != #praId#
        and t.orders_docs_odo_id = #docId#
    </select>
</sqlMap> 
